const language_grammar: { [key: string]: RegExp } = {
  NEWLINE: /([aA-zZ]+|[0-9]+||\s+|\d+)?(\n+)+?/,
  BAREWORD: /^([0-9]|[aA-zZ])?(\s|[0-9]|[aA-zZ])+/gm,
  WHITESPACE: /(\s+)/im,
  BLOCK_START: /\({/im,
  BLOCK_END: /}\)/im,
  FUNCTION: /function./im,
  FUNCTION_NO_ARGS: /\(\)/im,
  FUNCTION_NO_ARGS_NAMED: /[aA-zZ]+\(\)/im,
  // FUNCTION_ARG_VALUES: /\([a-zA-Z0-9](,)?([a-zA-Z0-9])?\)/,
  FUNCTION_ARG_VALUES: /(?<!\()([aA-zZ]+|[0-9]+|_+|-+)+(?=(,|\)))/im,
  FUNCTION_ARG_START: /\(/im,
  FUNCTION_ARG_SEP: /,/im,
  FUNCTION_ARG_END: /\)/im,
  MATH_OPERATION: /([0-9]+|[aA-zZ]+)+(\+|\-|\*|\/|<|>|<=|>=|%|\^)([0-9]+|[aA-zZ]+)/im,
  OPERATOR_PRINTF: /%s/im,
  OPERATOR_MATH: /(\+|\-|\*|\/|<|>|<=|>=|%|\^)/im,
  STRING: /".*"/i,
  NOP: /nop/im,
  LOOP: /loop/im,
  WHILE: /while/im,
  FOR: /for/im,
  IF: /if/im,
  IF_ELSE: /if_else/im,
  PRINT: /print/im,
  PRINTF: /printf/im,
};

export default language_grammar;
